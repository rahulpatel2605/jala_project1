pipeline {
    agent any

    environment {
        registryName = "my_app" // Update the registry name as needed
        registryCredential = credentials('Azure_ACR_Credentials')
        dockerImage = 'my_app:v1.0' // Update the image name and tag as needed
        registryUrl = 'jalaacr.azurecr.io'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Build and Test') {
            steps {
                sh 'chmod 755 build_script.sh'
                sh './build_script.sh'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    docker.build("${registryName}:${BUILD_NUMBER}", ".")
                }
            }
        }


        #stage('Tag Docker Image') {
        #    steps {
        #        script {
        #            docker.image("${registryName}:${BUILD_NUMBER}").tag("${registryUrl}/${dockerImage.replace(':', '_')}:${BUILD_NUMBER}")
        #        }
        #    }
        #}

        stage('Upload Image to ACR') {
            steps {
                script {
                    docker.withRegistry("${registryUrl}", registryCredential) {
                        docker.image("${registryName}:${BUILD_NUMBER}").push()
                    }
                }
            }
        }

        stage('Deploy to VM') {
            steps {
                sh 'ssh your-vm-user@your-vm-ip "docker pull ${registryUrl}/${dockerImage}:${BUILD_NUMBER}"'
            }
        }

        stage('Validation') {
            steps {
                script {
                    sh 'curl http://your-vm-ip:80' // Example: Check if the app is accessible
                    sh 'npm test' // Example: Run additional tests
                    // Add any other validation tasks relevant to your application
                }
            }
        }

        stage('Send Email Notification') {
            steps {
                script {
                    currentBuild.resultIsBetterOrEqualTo('SUCCESS') ? currentBuild.result = 'SUCCESS' : { currentBuild.result = 'FAILURE' }

                    emailext (
                        subject: "Pipeline ${currentBuild.result}: Web App Deployment",
                        body: "The pipeline has completed with status ${currentBuild.result}.",
                        recipientProviders: [[$class: 'DevelopersRecipientProvider']],
                        to: 'your-email@example.com',
                    )
                }
            }
        }
    }
}
